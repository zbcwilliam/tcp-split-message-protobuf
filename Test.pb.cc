// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace testprotobuf {

namespace {

const ::google::protobuf::Descriptor* HeartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartInfo_MapStmsiEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartInfo_MapStmsiEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Test_2eproto() {
  protobuf_AddDesc_Test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Test.proto");
  GOOGLE_CHECK(file != NULL);
  HeartInfo_descriptor_ = file->message_type(0);
  static const int HeartInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, curtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, hostip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, mapstmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, testelement_),
  };
  HeartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartInfo_descriptor_,
      HeartInfo::default_instance_,
      HeartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartInfo));
  HeartInfo_MapStmsiEntry_descriptor_ = HeartInfo_descriptor_->nested_type(0);
  static const int HeartInfo_MapStmsiEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo_MapStmsiEntry, stmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo_MapStmsiEntry, times_),
  };
  HeartInfo_MapStmsiEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartInfo_MapStmsiEntry_descriptor_,
      HeartInfo_MapStmsiEntry::default_instance_,
      HeartInfo_MapStmsiEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo_MapStmsiEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartInfo_MapStmsiEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartInfo_MapStmsiEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartInfo_descriptor_, &HeartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartInfo_MapStmsiEntry_descriptor_, &HeartInfo_MapStmsiEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Test_2eproto() {
  delete HeartInfo::default_instance_;
  delete HeartInfo_reflection_;
  delete HeartInfo_MapStmsiEntry::default_instance_;
  delete HeartInfo_MapStmsiEntry_reflection_;
}

void protobuf_AddDesc_Test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTest.proto\022\014testprotobuf\"\257\001\n\tHeartInfo"
    "\022\017\n\007curtime\030\001 \001(\005\022\016\n\006hostip\030\002 \001(\t\0227\n\010map"
    "stmsi\030\003 \003(\0132%.testprotobuf.HeartInfo.Map"
    "StmsiEntry\022\023\n\013testelement\030\004 \001(\005\0323\n\rMapSt"
    "msiEntry\022\020\n\005stmsi\030\001 \001(\005:\0010\022\020\n\005times\030\002 \001("
    "\005:\0010B\002H\001", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Test.proto", &protobuf_RegisterTypes);
  HeartInfo::default_instance_ = new HeartInfo();
  HeartInfo_MapStmsiEntry::default_instance_ = new HeartInfo_MapStmsiEntry();
  HeartInfo::default_instance_->InitAsDefaultInstance();
  HeartInfo_MapStmsiEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Test_2eproto {
  StaticDescriptorInitializer_Test_2eproto() {
    protobuf_AddDesc_Test_2eproto();
  }
} static_descriptor_initializer_Test_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeartInfo_MapStmsiEntry::kStmsiFieldNumber;
const int HeartInfo_MapStmsiEntry::kTimesFieldNumber;
#endif  // !_MSC_VER

HeartInfo_MapStmsiEntry::HeartInfo_MapStmsiEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testprotobuf.HeartInfo.MapStmsiEntry)
}

void HeartInfo_MapStmsiEntry::InitAsDefaultInstance() {
}

HeartInfo_MapStmsiEntry::HeartInfo_MapStmsiEntry(const HeartInfo_MapStmsiEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:testprotobuf.HeartInfo.MapStmsiEntry)
}

void HeartInfo_MapStmsiEntry::SharedCtor() {
  _cached_size_ = 0;
  stmsi_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartInfo_MapStmsiEntry::~HeartInfo_MapStmsiEntry() {
  // @@protoc_insertion_point(destructor:testprotobuf.HeartInfo.MapStmsiEntry)
  SharedDtor();
}

void HeartInfo_MapStmsiEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartInfo_MapStmsiEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartInfo_MapStmsiEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartInfo_MapStmsiEntry_descriptor_;
}

const HeartInfo_MapStmsiEntry& HeartInfo_MapStmsiEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

HeartInfo_MapStmsiEntry* HeartInfo_MapStmsiEntry::default_instance_ = NULL;

HeartInfo_MapStmsiEntry* HeartInfo_MapStmsiEntry::New() const {
  return new HeartInfo_MapStmsiEntry;
}

void HeartInfo_MapStmsiEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartInfo_MapStmsiEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stmsi_, times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartInfo_MapStmsiEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testprotobuf.HeartInfo.MapStmsiEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stmsi = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stmsi_)));
          set_has_stmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testprotobuf.HeartInfo.MapStmsiEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testprotobuf.HeartInfo.MapStmsiEntry)
  return false;
#undef DO_
}

void HeartInfo_MapStmsiEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testprotobuf.HeartInfo.MapStmsiEntry)
  // optional int32 stmsi = 1 [default = 0];
  if (has_stmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stmsi(), output);
  }

  // optional int32 times = 2 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testprotobuf.HeartInfo.MapStmsiEntry)
}

::google::protobuf::uint8* HeartInfo_MapStmsiEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testprotobuf.HeartInfo.MapStmsiEntry)
  // optional int32 stmsi = 1 [default = 0];
  if (has_stmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stmsi(), target);
  }

  // optional int32 times = 2 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testprotobuf.HeartInfo.MapStmsiEntry)
  return target;
}

int HeartInfo_MapStmsiEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stmsi = 1 [default = 0];
    if (has_stmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stmsi());
    }

    // optional int32 times = 2 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartInfo_MapStmsiEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartInfo_MapStmsiEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartInfo_MapStmsiEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartInfo_MapStmsiEntry::MergeFrom(const HeartInfo_MapStmsiEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stmsi()) {
      set_stmsi(from.stmsi());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartInfo_MapStmsiEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartInfo_MapStmsiEntry::CopyFrom(const HeartInfo_MapStmsiEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartInfo_MapStmsiEntry::IsInitialized() const {

  return true;
}

void HeartInfo_MapStmsiEntry::Swap(HeartInfo_MapStmsiEntry* other) {
  if (other != this) {
    std::swap(stmsi_, other->stmsi_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartInfo_MapStmsiEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartInfo_MapStmsiEntry_descriptor_;
  metadata.reflection = HeartInfo_MapStmsiEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeartInfo::kCurtimeFieldNumber;
const int HeartInfo::kHostipFieldNumber;
const int HeartInfo::kMapstmsiFieldNumber;
const int HeartInfo::kTestelementFieldNumber;
#endif  // !_MSC_VER

HeartInfo::HeartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testprotobuf.HeartInfo)
}

void HeartInfo::InitAsDefaultInstance() {
}

HeartInfo::HeartInfo(const HeartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:testprotobuf.HeartInfo)
}

void HeartInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curtime_ = 0;
  hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  testelement_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartInfo::~HeartInfo() {
  // @@protoc_insertion_point(destructor:testprotobuf.HeartInfo)
  SharedDtor();
}

void HeartInfo::SharedDtor() {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostip_;
  }
  if (this != default_instance_) {
  }
}

void HeartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartInfo_descriptor_;
}

const HeartInfo& HeartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Test_2eproto();
  return *default_instance_;
}

HeartInfo* HeartInfo::default_instance_ = NULL;

HeartInfo* HeartInfo::New() const {
  return new HeartInfo;
}

void HeartInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(curtime_, testelement_);
    if (has_hostip()) {
      if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mapstmsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:testprotobuf.HeartInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostip;
        break;
      }

      // optional string hostip = 2;
      case 2: {
        if (tag == 18) {
         parse_hostip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostip().data(), this->hostip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mapstmsi;
        break;
      }

      // repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
      case 3: {
        if (tag == 26) {
         parse_mapstmsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapstmsi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mapstmsi;
        if (input->ExpectTag(32)) goto parse_testelement;
        break;
      }

      // optional int32 testelement = 4;
      case 4: {
        if (tag == 32) {
         parse_testelement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testelement_)));
          set_has_testelement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:testprotobuf.HeartInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:testprotobuf.HeartInfo)
  return false;
#undef DO_
}

void HeartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:testprotobuf.HeartInfo)
  // optional int32 curtime = 1;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curtime(), output);
  }

  // optional string hostip = 2;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostip(), output);
  }

  // repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
  for (int i = 0; i < this->mapstmsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mapstmsi(i), output);
  }

  // optional int32 testelement = 4;
  if (has_testelement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->testelement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:testprotobuf.HeartInfo)
}

::google::protobuf::uint8* HeartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:testprotobuf.HeartInfo)
  // optional int32 curtime = 1;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curtime(), target);
  }

  // optional string hostip = 2;
  if (has_hostip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostip().data(), this->hostip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostip(), target);
  }

  // repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
  for (int i = 0; i < this->mapstmsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mapstmsi(i), target);
  }

  // optional int32 testelement = 4;
  if (has_testelement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->testelement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testprotobuf.HeartInfo)
  return target;
}

int HeartInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curtime = 1;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtime());
    }

    // optional string hostip = 2;
    if (has_hostip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostip());
    }

    // optional int32 testelement = 4;
    if (has_testelement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testelement());
    }

  }
  // repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
  total_size += 1 * this->mapstmsi_size();
  for (int i = 0; i < this->mapstmsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapstmsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartInfo::MergeFrom(const HeartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapstmsi_.MergeFrom(from.mapstmsi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
    if (from.has_hostip()) {
      set_hostip(from.hostip());
    }
    if (from.has_testelement()) {
      set_testelement(from.testelement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartInfo::CopyFrom(const HeartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartInfo::IsInitialized() const {

  return true;
}

void HeartInfo::Swap(HeartInfo* other) {
  if (other != this) {
    std::swap(curtime_, other->curtime_);
    std::swap(hostip_, other->hostip_);
    mapstmsi_.Swap(&other->mapstmsi_);
    std::swap(testelement_, other->testelement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartInfo_descriptor_;
  metadata.reflection = HeartInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace testprotobuf

// @@protoc_insertion_point(global_scope)
