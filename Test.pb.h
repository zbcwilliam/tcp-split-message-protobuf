// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#ifndef PROTOBUF_Test_2eproto__INCLUDED
#define PROTOBUF_Test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace testprotobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Test_2eproto();
void protobuf_AssignDesc_Test_2eproto();
void protobuf_ShutdownFile_Test_2eproto();

class HeartInfo;
class HeartInfo_MapStmsiEntry;

// ===================================================================

class HeartInfo_MapStmsiEntry : public ::google::protobuf::Message {
 public:
  HeartInfo_MapStmsiEntry();
  virtual ~HeartInfo_MapStmsiEntry();

  HeartInfo_MapStmsiEntry(const HeartInfo_MapStmsiEntry& from);

  inline HeartInfo_MapStmsiEntry& operator=(const HeartInfo_MapStmsiEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartInfo_MapStmsiEntry& default_instance();

  void Swap(HeartInfo_MapStmsiEntry* other);

  // implements Message ----------------------------------------------

  HeartInfo_MapStmsiEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartInfo_MapStmsiEntry& from);
  void MergeFrom(const HeartInfo_MapStmsiEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stmsi = 1 [default = 0];
  inline bool has_stmsi() const;
  inline void clear_stmsi();
  static const int kStmsiFieldNumber = 1;
  inline ::google::protobuf::int32 stmsi() const;
  inline void set_stmsi(::google::protobuf::int32 value);

  // optional int32 times = 2 [default = 0];
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testprotobuf.HeartInfo.MapStmsiEntry)
 private:
  inline void set_has_stmsi();
  inline void clear_has_stmsi();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stmsi_;
  ::google::protobuf::int32 times_;
  friend void  protobuf_AddDesc_Test_2eproto();
  friend void protobuf_AssignDesc_Test_2eproto();
  friend void protobuf_ShutdownFile_Test_2eproto();

  void InitAsDefaultInstance();
  static HeartInfo_MapStmsiEntry* default_instance_;
};
// -------------------------------------------------------------------

class HeartInfo : public ::google::protobuf::Message {
 public:
  HeartInfo();
  virtual ~HeartInfo();

  HeartInfo(const HeartInfo& from);

  inline HeartInfo& operator=(const HeartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartInfo& default_instance();

  void Swap(HeartInfo* other);

  // implements Message ----------------------------------------------

  HeartInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartInfo& from);
  void MergeFrom(const HeartInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeartInfo_MapStmsiEntry MapStmsiEntry;

  // accessors -------------------------------------------------------

  // optional int32 curtime = 1;
  inline bool has_curtime() const;
  inline void clear_curtime();
  static const int kCurtimeFieldNumber = 1;
  inline ::google::protobuf::int32 curtime() const;
  inline void set_curtime(::google::protobuf::int32 value);

  // optional string hostip = 2;
  inline bool has_hostip() const;
  inline void clear_hostip();
  static const int kHostipFieldNumber = 2;
  inline const ::std::string& hostip() const;
  inline void set_hostip(const ::std::string& value);
  inline void set_hostip(const char* value);
  inline void set_hostip(const char* value, size_t size);
  inline ::std::string* mutable_hostip();
  inline ::std::string* release_hostip();
  inline void set_allocated_hostip(::std::string* hostip);

  // repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
  inline int mapstmsi_size() const;
  inline void clear_mapstmsi();
  static const int kMapstmsiFieldNumber = 3;
  inline const ::testprotobuf::HeartInfo_MapStmsiEntry& mapstmsi(int index) const;
  inline ::testprotobuf::HeartInfo_MapStmsiEntry* mutable_mapstmsi(int index);
  inline ::testprotobuf::HeartInfo_MapStmsiEntry* add_mapstmsi();
  inline const ::google::protobuf::RepeatedPtrField< ::testprotobuf::HeartInfo_MapStmsiEntry >&
      mapstmsi() const;
  inline ::google::protobuf::RepeatedPtrField< ::testprotobuf::HeartInfo_MapStmsiEntry >*
      mutable_mapstmsi();

  // optional int32 testelement = 4;
  inline bool has_testelement() const;
  inline void clear_testelement();
  static const int kTestelementFieldNumber = 4;
  inline ::google::protobuf::int32 testelement() const;
  inline void set_testelement(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testprotobuf.HeartInfo)
 private:
  inline void set_has_curtime();
  inline void clear_has_curtime();
  inline void set_has_hostip();
  inline void clear_has_hostip();
  inline void set_has_testelement();
  inline void clear_has_testelement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hostip_;
  ::google::protobuf::int32 curtime_;
  ::google::protobuf::int32 testelement_;
  ::google::protobuf::RepeatedPtrField< ::testprotobuf::HeartInfo_MapStmsiEntry > mapstmsi_;
  friend void  protobuf_AddDesc_Test_2eproto();
  friend void protobuf_AssignDesc_Test_2eproto();
  friend void protobuf_ShutdownFile_Test_2eproto();

  void InitAsDefaultInstance();
  static HeartInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// HeartInfo_MapStmsiEntry

// optional int32 stmsi = 1 [default = 0];
inline bool HeartInfo_MapStmsiEntry::has_stmsi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartInfo_MapStmsiEntry::set_has_stmsi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartInfo_MapStmsiEntry::clear_has_stmsi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartInfo_MapStmsiEntry::clear_stmsi() {
  stmsi_ = 0;
  clear_has_stmsi();
}
inline ::google::protobuf::int32 HeartInfo_MapStmsiEntry::stmsi() const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.MapStmsiEntry.stmsi)
  return stmsi_;
}
inline void HeartInfo_MapStmsiEntry::set_stmsi(::google::protobuf::int32 value) {
  set_has_stmsi();
  stmsi_ = value;
  // @@protoc_insertion_point(field_set:testprotobuf.HeartInfo.MapStmsiEntry.stmsi)
}

// optional int32 times = 2 [default = 0];
inline bool HeartInfo_MapStmsiEntry::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartInfo_MapStmsiEntry::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartInfo_MapStmsiEntry::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartInfo_MapStmsiEntry::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 HeartInfo_MapStmsiEntry::times() const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.MapStmsiEntry.times)
  return times_;
}
inline void HeartInfo_MapStmsiEntry::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:testprotobuf.HeartInfo.MapStmsiEntry.times)
}

// -------------------------------------------------------------------

// HeartInfo

// optional int32 curtime = 1;
inline bool HeartInfo::has_curtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartInfo::set_has_curtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartInfo::clear_has_curtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartInfo::clear_curtime() {
  curtime_ = 0;
  clear_has_curtime();
}
inline ::google::protobuf::int32 HeartInfo::curtime() const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.curtime)
  return curtime_;
}
inline void HeartInfo::set_curtime(::google::protobuf::int32 value) {
  set_has_curtime();
  curtime_ = value;
  // @@protoc_insertion_point(field_set:testprotobuf.HeartInfo.curtime)
}

// optional string hostip = 2;
inline bool HeartInfo::has_hostip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartInfo::set_has_hostip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartInfo::clear_has_hostip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartInfo::clear_hostip() {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_->clear();
  }
  clear_has_hostip();
}
inline const ::std::string& HeartInfo::hostip() const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.hostip)
  return *hostip_;
}
inline void HeartInfo::set_hostip(const ::std::string& value) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(value);
  // @@protoc_insertion_point(field_set:testprotobuf.HeartInfo.hostip)
}
inline void HeartInfo::set_hostip(const char* value) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(value);
  // @@protoc_insertion_point(field_set_char:testprotobuf.HeartInfo.hostip)
}
inline void HeartInfo::set_hostip(const char* value, size_t size) {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  hostip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:testprotobuf.HeartInfo.hostip)
}
inline ::std::string* HeartInfo::mutable_hostip() {
  set_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:testprotobuf.HeartInfo.hostip)
  return hostip_;
}
inline ::std::string* HeartInfo::release_hostip() {
  clear_has_hostip();
  if (hostip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostip_;
    hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HeartInfo::set_allocated_hostip(::std::string* hostip) {
  if (hostip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostip_;
  }
  if (hostip) {
    set_has_hostip();
    hostip_ = hostip;
  } else {
    clear_has_hostip();
    hostip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:testprotobuf.HeartInfo.hostip)
}

// repeated .testprotobuf.HeartInfo.MapStmsiEntry mapstmsi = 3;
inline int HeartInfo::mapstmsi_size() const {
  return mapstmsi_.size();
}
inline void HeartInfo::clear_mapstmsi() {
  mapstmsi_.Clear();
}
inline const ::testprotobuf::HeartInfo_MapStmsiEntry& HeartInfo::mapstmsi(int index) const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.mapstmsi)
  return mapstmsi_.Get(index);
}
inline ::testprotobuf::HeartInfo_MapStmsiEntry* HeartInfo::mutable_mapstmsi(int index) {
  // @@protoc_insertion_point(field_mutable:testprotobuf.HeartInfo.mapstmsi)
  return mapstmsi_.Mutable(index);
}
inline ::testprotobuf::HeartInfo_MapStmsiEntry* HeartInfo::add_mapstmsi() {
  // @@protoc_insertion_point(field_add:testprotobuf.HeartInfo.mapstmsi)
  return mapstmsi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::testprotobuf::HeartInfo_MapStmsiEntry >&
HeartInfo::mapstmsi() const {
  // @@protoc_insertion_point(field_list:testprotobuf.HeartInfo.mapstmsi)
  return mapstmsi_;
}
inline ::google::protobuf::RepeatedPtrField< ::testprotobuf::HeartInfo_MapStmsiEntry >*
HeartInfo::mutable_mapstmsi() {
  // @@protoc_insertion_point(field_mutable_list:testprotobuf.HeartInfo.mapstmsi)
  return &mapstmsi_;
}

// optional int32 testelement = 4;
inline bool HeartInfo::has_testelement() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartInfo::set_has_testelement() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartInfo::clear_has_testelement() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartInfo::clear_testelement() {
  testelement_ = 0;
  clear_has_testelement();
}
inline ::google::protobuf::int32 HeartInfo::testelement() const {
  // @@protoc_insertion_point(field_get:testprotobuf.HeartInfo.testelement)
  return testelement_;
}
inline void HeartInfo::set_testelement(::google::protobuf::int32 value) {
  set_has_testelement();
  testelement_ = value;
  // @@protoc_insertion_point(field_set:testprotobuf.HeartInfo.testelement)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace testprotobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Test_2eproto__INCLUDED
